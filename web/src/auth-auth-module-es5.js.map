{"version":3,"sources":["webpack:///./src/app/auth/auth/auth.component.html","webpack:///./src/app/auth/forgot-password/forgot-password.component.html","webpack:///./src/app/auth/login-confirm/login-confirm.component.html","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/register/register.component.html","webpack:///./src/app/auth/setpassword/setpassword.component.html","webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/auth/auth.component.ts","webpack:///./src/app/auth/forgot-password/forgot-password.component.ts","webpack:///./src/app/auth/login-confirm/login-confirm.component.ts","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/register/register.component.ts","webpack:///./src/app/auth/setpassword/setpassword.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["module.exports = \"<router-outlet></router-outlet>\"","module.exports = \"<div class=\\\"container section-padding\\\">\\r\\n  <div class=\\\"row-same-height row\\\">\\r\\n    <div class=\\\"col-same-height col-sm-3 flexVMiddle\\\"></div>\\r\\n    <div class=\\\"col-same-height col-sm-6 flexVMiddle bgGray\\\">\\r\\n      <div class=\\\"form-wrapper content\\\">\\r\\n        <h2>Forgot Password</h2>\\r\\n        <form [formGroup]=\\\"formElement\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"\\\">Email address <span class=\\\"required\\\">*</span></label>\\r\\n                <input class=\\\"width_100\\\" type=\\\"text\\\" placeholder=\\\"Enter Here\\\" pInputText formControlName=\\\"email\\\" />\\r\\n                <p class=\\\"msgError text-danger\\\"\\r\\n                  *ngIf=\\\"formControl.email.invalid && (formControl.email.dirty || submitted)\\\">\\r\\n                  <small *ngIf=\\\"formControl.email.hasError('email') &&\\r\\n                        !formControl.email.hasError('required')\\\">\\r\\n                    Please enter a valid email address\\r\\n                  </small>\\r\\n                  <small *ngIf=\\\"formControl.email.hasError('required')\\\">\\r\\n                    Required Field.\\r\\n                  </small>\\r\\n                </p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group text-center\\\">\\r\\n            <button pButton type=\\\"button\\\" label=\\\"Submit\\\" class=\\\"ui-button-raised ui-button-success\\\"\\r\\n              (click)=\\\"handleSubmitForm()\\\"></button>\\r\\n            <button pButton type=\\\"button\\\" label=\\\"Back to Login\\\" class=\\\"ui-button-raised\\\"\\r\\n              [routerLink]=\\\"['/auth/login']\\\"></button>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"form-box margin-bot-30\\\">\\r\\n    <div class=\\\"thanks-message text-center\\\">\\r\\n      <h4>{{message}}</h4>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\" *ngIf=\\\"reValidateEmail\\\">\\r\\n    <div class=\\\"col-md-12 text-center\\\">\\r\\n      <button class=\\\"btn btn-primary\\\" (click)=\\\"handleConfirmLogin()\\\">Validate</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","module.exports = \"<div class=\\\"container section-padding\\\">\\r\\n  <div class=\\\"row-same-height row\\\">\\r\\n    <div class=\\\"col-same-height col-sm-3 flexVMiddle\\\"></div>\\r\\n    <div class=\\\"col-same-height col-sm-6 flexVMiddle bgGray\\\">\\r\\n      <div class=\\\"form-wrapper content\\\">\\r\\n        <h2>LOGIN</h2>\\r\\n        <form [formGroup]=\\\"loginForm\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"\\\">Email <span class=\\\"required\\\">*</span></label>\\r\\n            <input class=\\\"width_100\\\" type=\\\"email\\\" placeholder=\\\"Enter Here\\\" pInputText formControlName=\\\"userName\\\" required />\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"\\\">Password <span class=\\\"required\\\">*</span></label>\\r\\n            <input class=\\\"width_100\\\" type=\\\"password\\\" placeholder=\\\"Enter Here\\\" pInputText formControlName=\\\"password\\\"\\r\\n              required />\\r\\n          </div>\\r\\n          <div class=\\\"row form-group\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"ui-g-12\\\">\\r\\n                <p-checkbox label=\\\"Remember me\\\" formControlName=\\\"isRememberMe\\\" inputId=\\\"isRememberMe\\\">\\r\\n                </p-checkbox>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6 text-right\\\">\\r\\n              <button pButton type=\\\"button\\\" label=\\\"Forgot Password?\\\"\\r\\n                class=\\\"ui-button-raised ui-button-secondary\\\" [routerLink]=\\\"['/auth/forgot']\\\"></button>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-sm-6\\\">\\r\\n                <button pButton type=\\\"submit\\\" label=\\\"LOGIN\\\" class=\\\"ui-button-raised ui-button-success\\\"\\r\\n                  [disabled]=\\\"!loginForm.valid\\\" (click)=\\\"handleLogin()\\\"></button>\\r\\n              </div>\\r\\n              <div class=\\\"col-sm-6 text-right\\\">\\r\\n                <span class=\\\"mar-r-15\\\">\\r\\n                  New to ScaledSkills?\\r\\n                </span>\\r\\n                <button pButton type=\\\"button\\\" label=\\\"SIGN UP\\\" class=\\\"ui-button-raised\\\"\\r\\n                  [routerLink]=\\\"['/auth/register']\\\"></button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-same-height col-sm-3 flexVMiddle\\\">\\r\\n\\r\\n      </div>\\r\\n    <!-- <div class=\\\"col-same-height col-sm-6 text-center flexVMiddle bgGray\\\">\\r\\n      <div class=\\\"form-wrapper content\\\">\\r\\n        <div class=\\\"social-opton\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"mb-5\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-fb\\\"><i class=\\\"fa fa-facebook\\\"\\r\\n                  aria-hidden=\\\"true\\\"></i>Facebook</button>\\r\\n            </div>\\r\\n            <div class=\\\"mb-5\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-li\\\"><i class=\\\"fa fa-linkedin\\\"\\r\\n                  aria-hidden=\\\"true\\\"></i>LINKEDIN</button>\\r\\n            </div>\\r\\n            <div class=\\\"mb-5\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-gplus\\\"><i class=\\\"fa fa-google\\\" aria-hidden=\\\"true\\\"></i>GOOGLE</button>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"\\\">\\r\\n              <hr>\\r\\n              <div class=\\\"text-center\\\">\\r\\n                <div color=\\\"warn\\\">Trouble signing in?</div>\\r\\n                <div>\\r\\n                  <button pButton type=\\\"button\\\" label=\\\"REPORT AN ISSUE\\\"\\r\\n                    class=\\\"ui-button-raised ui-button-warning\\\"></button>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div> -->\\r\\n  </div>\\r\\n</div>\"","module.exports = \"<div class=\\\"container section-padding\\\">\\r\\n  <div class=\\\"row-same-height row\\\">\\r\\n    <div class=\\\"col-same-height col-sm-3 flexVMiddle\\\"></div>\\r\\n    <div class=\\\"col-same-height col-sm-6 flexVMiddle bgGray\\\">\\r\\n      <div class=\\\"form-wrapper content\\\">\\r\\n        <h2>SIGN UP</h2>\\r\\n        <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"\\\">First Name <span class=\\\"required\\\">*</span></label>\\r\\n                <input type=\\\"text\\\" placeholder=\\\"Enter Here\\\" pInputText formControlName=\\\"firstName\\\" />\\r\\n                <p class=\\\"msgError text-danger\\\"\\r\\n                  *ngIf=\\\"formControl.firstName.invalid && (formControl.firstName.dirty || submitted)\\\">\\r\\n                  <small *ngIf=\\\"formControl.firstName.hasError('required')\\\">\\r\\n                    Required Field.\\r\\n                  </small>\\r\\n                </p>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"\\\">Last Name <span class=\\\"required\\\">*</span></label>\\r\\n                <input class=\\\"width_100\\\" type=\\\"text\\\" placeholder=\\\"Enter Here\\\" pInputText formControlName=\\\"lastName\\\" />\\r\\n                <p class=\\\"msgError text-danger\\\"\\r\\n                  *ngIf=\\\"formControl.lastName.invalid && (formControl.lastName.dirty || submitted)\\\">\\r\\n                  <small *ngIf=\\\"formControl.lastName.hasError('required')\\\">\\r\\n                    Required Field.\\r\\n                  </small>\\r\\n                </p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"\\\">Email address <span class=\\\"required\\\">*</span></label>\\r\\n            <input class=\\\"width_100\\\" type=\\\"text\\\" placeholder=\\\"Enter Here\\\" pInputText formControlName=\\\"email\\\" />\\r\\n            <p class=\\\"msgError text-danger\\\" *ngIf=\\\"formControl.email.invalid && (formControl.email.dirty || submitted)\\\">\\r\\n              <small *ngIf=\\\"formControl.email.hasError('email') &&\\r\\n                    !formControl.email.hasError('required')\\\">\\r\\n                Please enter a valid email address\\r\\n              </small>\\r\\n              <small *ngIf=\\\"formControl.email.hasError('required')\\\">\\r\\n                Required Field.\\r\\n              </small>\\r\\n            </p>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"\\\">Mobile Number <span class=\\\"required\\\">*</span></label>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-sm-4\\\" style=\\\"padding-right: 0\\\">\\r\\n                <angular2-multiselect [data]=\\\"countryList\\\" [(ngModel)]=\\\"selectedCountry\\\" [settings]=\\\"settings\\\"\\r\\n                  (onSelect)=\\\"OnCountrySelect($event)\\\" (onDeSelect)=\\\"OnCountryDeSelect($event)\\\"\\r\\n                  formControlName=\\\"countryObj\\\">\\r\\n                  \\r\\n                </angular2-multiselect>\\r\\n              </div>\\r\\n              <div class=\\\"col-sm-8\\\" [ngClass]=\\\"{disabled: formControl.countryCode.value==null}\\\">\\r\\n                <input type=\\\"text\\\" placeholder=\\\"Enter Here\\\" pInputText formControlName=\\\"phoneNumber\\\" maxlength=\\\"10\\\"\\r\\n                  digitOnly />\\r\\n              </div>\\r\\n            </div>\\r\\n            <p class=\\\"msgError text-danger\\\"\\r\\n              *ngIf=\\\"formControl.phoneNumber.invalid && (formControl.phoneNumber.dirty || submitted)\\\">\\r\\n              <small *ngIf=\\\"formControl.phoneNumber.hasError('maxlength')\\\">\\r\\n                Max 10 numbers.\\r\\n              </small>\\r\\n              <small *ngIf=\\\"formControl.phoneNumber.hasError('minlength')\\\">\\r\\n                Atleast 10 numbers.\\r\\n              </small>\\r\\n              <small *ngIf=\\\"formControl.phoneNumber.hasError('required')\\\">\\r\\n                Required Field.\\r\\n              </small>\\r\\n            </p>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"\\\">Password <span class=\\\"required\\\">*</span></label>\\r\\n                <div class=\\\"ui-inputgroup\\\">\\r\\n                  <input class=\\\"width_100\\\" type=\\\"{{inputType}}\\\" placeholder=\\\"Enter Here\\\" pInputText\\r\\n                    formControlName=\\\"password\\\" />\\r\\n                  <span class=\\\"ui-inputgroup-addon cursor-pointer\\\">\\r\\n                    <i class=\\\"fa fa-eye\\\" aria-hidden=\\\"true\\\" (click)=\\\"handleEyeType()\\\"></i>\\r\\n                  </span>\\r\\n                </div>\\r\\n                <p class=\\\"msgError text-danger\\\"\\r\\n                  *ngIf=\\\"formControl.password.invalid && (formControl.password.dirty || submitted)\\\">\\r\\n                  <small *ngIf=\\\"formControl.password.hasError('minlength')\\\">\\r\\n                    Password should be atleast 6git characters.\\r\\n                  </small>\\r\\n                  <small *ngIf=\\\"formControl.password.hasError('required')\\\">\\r\\n                    Required Field.\\r\\n                  </small>\\r\\n                </p>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"\\\">Confirm Password <span class=\\\"required\\\">*</span></label>\\r\\n                <div class=\\\"ui-inputgroup\\\">\\r\\n                  <input class=\\\"width_100\\\" type=\\\"{{inputType}}\\\" placeholder=\\\"Enter Here\\\" pInputText\\r\\n                    formControlName=\\\"confirmPassword\\\" />\\r\\n                  <span class=\\\"ui-inputgroup-addon cursor-pointer\\\">\\r\\n                    <i class=\\\"fa fa-eye\\\" aria-hidden=\\\"true\\\" (click)=\\\"handleEyeType()\\\"></i>\\r\\n                  </span>\\r\\n                </div>\\r\\n                <p class=\\\"msgError text-danger\\\"\\r\\n                  *ngIf=\\\"formControl.confirmPassword.invalid && (formControl.confirmPassword.dirty || submitted)\\\">\\r\\n                  <small *ngIf=\\\"formControl.confirmPassword.hasError('mustMatch')\\\">\\r\\n                    Password and confirm password should be same.\\r\\n                  </small>\\r\\n                  <small *ngIf=\\\"formControl.confirmPassword.hasError('required')\\\">\\r\\n                    Required Field.\\r\\n                  </small>\\r\\n                </p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div>By signing up, I agree to ScaledSkills\\r\\n              <a [routerLink]=\\\"['/home/terms']\\\"><b>T&C</b></a>\\r\\n              and\\r\\n              <a [routerLink]=\\\"['/home/privacy']\\\"><b>Privacy Policy</b></a>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row form-group\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n              <button pButton type=\\\"button\\\" label=\\\"SIGN UP\\\" class=\\\"ui-button-raised ui-button-success\\\"\\r\\n                (click)=\\\"handleSubmitForm()\\\"></button>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6 text-right\\\">\\r\\n              <span class=\\\"mar-r-15\\\">\\r\\n                Already registered?\\r\\n              </span>\\r\\n              <button pButton type=\\\"button\\\" label=\\\"LOGIN\\\" class=\\\"ui-button-raised\\\"\\r\\n                [routerLink]=\\\"['/auth/login']\\\"></button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-same-height col-sm-3 flexVMiddle\\\"></div>\\r\\n    <!-- <div class=\\\"col-same-height col-sm-6 text-center flexVMiddle bgGray\\\">\\r\\n      <div class=\\\"form-wrapper content\\\">\\r\\n        <div class=\\\"social-opton\\\">\\r\\n          <div class=\\\"\\\">\\r\\n            <div class=\\\"mb-5\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-fb\\\"><i class=\\\"fa fa-facebook\\\"\\r\\n                  aria-hidden=\\\"true\\\"></i>Facebook</button>\\r\\n            </div>\\r\\n            <div class=\\\"mb-5\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-li\\\"><i class=\\\"fa fa-linkedin\\\"\\r\\n                  aria-hidden=\\\"true\\\"></i>LINKEDIN</button>\\r\\n            </div>\\r\\n            <div class=\\\"mb-5\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-gplus\\\"><i class=\\\"fa fa-google\\\" aria-hidden=\\\"true\\\"></i>GOOGLE</button>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"\\\">\\r\\n            <div class=\\\"\\\">\\r\\n              <hr>\\r\\n              <div class=\\\"text-center\\\">\\r\\n                <div color=\\\"warn\\\">Trouble signing in?</div>\\r\\n                <div>\\r\\n                  <button pButton type=\\\"button\\\" label=\\\"REPORT AN ISSUE\\\"\\r\\n                    class=\\\"ui-button-raised ui-button-warning\\\"></button>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div> -->\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"<div class=\\\"container section-padding\\\">\\n    <div class=\\\"row-same-height row\\\">\\n      <div class=\\\"col-same-height col-sm-3 flexVMiddle\\\"></div>\\n      <div class=\\\"col-same-height col-sm-6 flexVMiddle bgGray\\\">\\n        <div class=\\\"form-wrapper content\\\">\\n          <h2>Forgot Password</h2>\\n          <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-sm-12\\\">\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"\\\">New Password <span class=\\\"required\\\">*</span></label>\\n                  <input class=\\\"width_100\\\" type=\\\"password\\\" placeholder=\\\"Password\\\" pInputText formControlName=\\\"newPassword\\\" />\\n                  <p class=\\\"msgError text-danger\\\"\\n                    *ngIf=\\\"formControl.newPassword.invalid && (formControl.newPassword.dirty || submitted)\\\">\\n                    <small *ngIf=\\\"formControl.newPassword.hasError('minlength')\\\">\\n                      Password should be atleast 5 characters.\\n                    </small>\\n                    <small *ngIf=\\\"formControl.newPassword.hasError('required')\\\">\\n                      Required Field.\\n                    </small>\\n                  </p>\\n                </div>\\n              </div>\\n              <div class=\\\"col-sm-12\\\">\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"\\\">Confirm Password <span class=\\\"required\\\">*</span></label>\\n                  <input class=\\\"width_100\\\" type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" pInputText\\n                    formControlName=\\\"confirmPassword\\\" />\\n                  <p class=\\\"msgError text-danger\\\"\\n                    *ngIf=\\\"formControl.confirmPassword.invalid && (formControl.confirmPassword.dirty || submitted)\\\">\\n                    <small *ngIf=\\\"formControl.confirmPassword.hasError('mustMatch')\\\">\\n                      Password and confirm password should be same.\\n                    </small>\\n                    <small *ngIf=\\\"formControl.confirmPassword.hasError('required')\\\">\\n                      Required Field.\\n                    </small>\\n                  </p>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group text-center\\\">\\n              <button pButton type=\\\"button\\\" label=\\\"Save\\\" class=\\\"ui-button-raised ui-button-success\\\"\\n                (click)=\\\"handleSubmitForm()\\\"></button>\\n              <button pButton type=\\\"button\\\" label=\\\"CANCEL\\\" class=\\\"ui-button-raised\\\"\\n                [routerLink]=\\\"['/auth/login']\\\"></button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\"","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AuthComponent } from './auth/auth.component';\r\nimport { LoginConfirmComponent } from './login-confirm/login-confirm.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { SetpasswordComponent } from './setpassword/setpassword.component';\r\nconst authRoutes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    children: [\r\n      { path: '', redirectTo: 'login', pathMatch: 'full' },\r\n      { path: 'login', component: LoginComponent },\r\n      { path: 'userValidate', component: LoginConfirmComponent },\r\n      { path: 'register', component: RegisterComponent },\r\n      { path: 'forgot', component: ForgotPasswordComponent },\r\n      { path: 'resetPassword', component: SetpasswordComponent },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(authRoutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { NgPrimeModule } from '../_forms/prime.module'\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AuthComponent } from './auth/auth.component';\r\nimport { SharedService } from '../_service/shared.service';\r\nimport { SharedModule } from '../_shared/shared.module';\r\nimport { LoginConfirmComponent } from './login-confirm/login-confirm.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { SetpasswordComponent } from './setpassword/setpassword.component';\r\n\r\n@NgModule({\r\n  declarations: [RegisterComponent, LoginComponent, AuthComponent, LoginConfirmComponent, ForgotPasswordComponent, SetpasswordComponent],\r\n  imports: [\r\n    AuthRoutingModule, NgPrimeModule, SharedModule\r\n  ],\r\n\r\n  providers: [SharedService]\r\n})\r\nexport class AuthModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html'\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport * as service from '../../_service';\r\nimport { MustMatch } from '../../_helpers/_validators/must-match.validator';\r\nimport { ApiPath } from '../../_helpers/_constants/api'\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  formElement: FormGroup;\r\n  error = '';\r\n  submitted: boolean = false;\r\n  countryList = [];\r\n  selectedCountry = [];\r\n\r\n\r\n\r\n  constructor(private _FormBuilder: FormBuilder, private _HttpService: service.HttpService, private _SharedService: service.SharedService, private _Router: Router) { }\r\n  ngOnInit() {\r\n    this.createForm(() => {\r\n\r\n\r\n    })\r\n  }\r\n  createForm = (callback: any): void => {\r\n    this.formElement = this._FormBuilder.group(\r\n      {\r\n        email: ['', [Validators.required, Validators.email]],\r\n      }\r\n    )\r\n    if (callback) {\r\n      callback()\r\n    }\r\n  }\r\n  get formControl() { return this.formElement.controls }\r\n\r\n\r\n  handleSubmitForm = () => {\r\n    if (this.formElement.invalid) {\r\n      this.submitted = true;\r\n      return\r\n    } else {\r\n      this.submitted = false;\r\n      let url = ApiPath.AccountForgotPassword\r\n      let param = {\r\n        email: this.formControl.email.value\r\n      }\r\n      this._HttpService.httpCall(url, 'GET', null, param).subscribe(res => {\r\n        if (res && res.responseCode == 406) {\r\n          let msgArray = [\r\n            { mgs: res.responseMessege, class: 'confirmMsg' }\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Message')\r\n        } else if (res && res.responseCode == 200) {\r\n          let msgArray = [\r\n            { mgs: res.responseMessege, class: 'confirmMsg' },\r\n            { mgs: 'Please check your registered email id for reset password link.', class: 'subMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, true, true, true, 'YES', 'CANCEL', false, 'Success').subscribe(res => {\r\n            this._Router.navigate(['/']);\r\n          })\r\n        } else {\r\n          let msgArray = [\r\n            { mgs: res && res.responseMessege ? res.responseMessege : 'Something went wrong', class: 'confirmMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\r\n        }\r\n      },\r\n        error => {\r\n          let msgArray = [\r\n            { mgs: error['message'] ? error['message'] : 'Server Error', class: 'confirmMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\r\n        })\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ApiPath } from '../../_helpers/_constants/api';\r\nimport { SharedService, HttpService } from '../../_service'\r\nimport { DialogService } from 'primeng/api';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n@Component({\r\n  selector: 'app-login-confirm',\r\n  templateUrl: './login-confirm.component.html'\r\n})\r\nexport class LoginConfirmComponent implements OnInit {\r\n  validateObj;\r\n  isEmailVerify: boolean = false;\r\n  reValidateEmail=true;\r\n  message: string = \"Validate your email address.\"\r\n  constructor(private _SharedService: SharedService,\r\n    public dialogService: DialogService, private _HttpService: HttpService, private _ActivatedRoute: ActivatedRoute, private _Router:Router) { }\r\n  ngOnInit() {\r\n    this._ActivatedRoute.queryParams.subscribe(queryParams => {\r\n      this.validateObj = queryParams;\r\n      // this.handleConfirmLogin()\r\n    })\r\n  }\r\n  handleConfirmLogin = () => {\r\n    let postObj = this.validateObj;\r\n    let url = ApiPath.confirmEmail;\r\n    this._HttpService.httpCall(url, 'POST', postObj, null).subscribe(res => {\r\n      if (res && res.responseCode == 200) {\r\n        this.isEmailVerify = true;\r\n        this.reValidateEmail=false;\r\n        this.message = res && res.result ? res.result : 'Email activated successfully.';\r\n        setTimeout(() => {\r\n          this._Router.navigate(['/auth/login']);\r\n        }, 1000)\r\n      } else {\r\n        let msgArray = [\r\n          { mgs: res && res.responseMessege ? res.responseMessege : 'Something went wrong', class: 'confirmMsg' },\r\n        ]\r\n        this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error').subscribe(res=>{\r\n          this.isEmailVerify = false;\r\n          this.message='Please validate your email address again.'\r\n          this.reValidateEmail=true;\r\n        })\r\n      }\r\n    },\r\n      error => {\r\n        this.reValidateEmail=true;\r\n        let msgArray = [\r\n          { mgs: error['message']?error['message']:'Server Error', class: 'confirmMsg' },\r\n        ]\r\n        this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\r\n      });\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\nimport { AuthenticationService } from '../../_service';\r\nimport { SharedService } from '../../_service'\r\nimport { first } from 'rxjs/operators';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ApiPath } from '../../_helpers/_constants/api';\r\nimport { DialogService } from 'primeng/api';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  providers: [DialogService]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  isRememberMe: boolean = false;\r\n  error = '';\r\n  constructor(\r\n    private _FormBuilder: FormBuilder,\r\n    private _Router: Router,\r\n    private _AuthenticationService: AuthenticationService,\r\n    private _SharedService: SharedService,\r\n    public dialogService: DialogService, private _ActivatedRoute:ActivatedRoute\r\n  ) {\r\n    if (this._AuthenticationService.currentUserValue) {\r\n      this._Router.navigate(['/account']);\r\n    }\r\n  }\r\n  ngOnInit() {\r\n    this.createForm(() => {\r\n    })\r\n    this.returnUrl = this._ActivatedRoute.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  createForm = (callback) => {\r\n    this.loginForm = this._FormBuilder.group(\r\n      {\r\n        userName: ['', [Validators.required, Validators.email]],\r\n        password: ['', Validators.required],\r\n        isRememberMe: false,\r\n        id: 0\r\n      }\r\n    )\r\n    if (callback) {\r\n      callback()\r\n    }\r\n  }\r\n  get formControl() { return this.loginForm.controls }\r\n  handleLogin = () => {\r\n    if (this.loginForm.invalid) {\r\n      this.submitted = true;\r\n      return\r\n    } else {\r\n      this.submitted = false;\r\n      let data = this.loginForm.value;\r\n      let url = ApiPath.Accountlogin;\r\n      this._AuthenticationService.login(url, data).pipe(first()).subscribe(res => {\r\n        if (res.responseCode == 200) {\r\n          this._Router.navigate([this.returnUrl]);\r\n          localStorage.removeItem('returnUrl')\r\n        } else if (res.responseCode == 406) {\r\n          let msgArray = [\r\n            { mgs: res.responseMessege, class: 'confirmMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Message')\r\n        }\r\n      },\r\n        error => {\r\n          let msgArray = [\r\n            { mgs: error['message']?error['message']:'Server Error', class: 'confirmMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\r\n        });\r\n    }\r\n  }\r\n  resetForm(formGroup: FormGroup) {\r\n    let control: AbstractControl = null;\r\n    formGroup.reset();\r\n    formGroup.markAsUntouched();\r\n    Object.keys(formGroup.controls).forEach((name) => {\r\n      control = formGroup.controls[name];\r\n      control.setErrors(null);\r\n    });\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport * as service from '../../_service';\r\nimport { MustMatch } from '../../_helpers/_validators/must-match.validator';\r\nimport { ApiPath } from '../../_helpers/_constants/api'\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  error = '';\r\n  submitted: boolean = false;\r\n  countryList = [];\r\n  selectedCountry = [{ \"text\": \"INDIA\", \"value\": \"1\", \"isSelect\": true }];\r\n  defaultList = [{\r\n    \"text\": \"Select\",\r\n    \"value\": \"0\",\r\n    \"isSelect\": false\r\n  }];\r\n  settings = {};\r\n  inputType = 'password'\r\n  countrySettings = {};\r\n  constructor(private _FormBuilder: FormBuilder, private _HttpService: service.HttpService, private _SharedService: service.SharedService, private _Router: Router) { }\r\n  ngOnInit() {\r\n    this.createForm(() => {\r\n      this.settings = {\r\n        singleSelection: true, text: \"Select\", labelKey: \"text\", primaryKey: \"value\", classes: \"myclass custom-class\", enableSearchFilter: true, searchBy: ['text'], searchPlaceholderText: 'Search by name'\r\n      };\r\n      this.getCountryList();\r\n    })\r\n  }\r\n  createForm = (callback: any): void => {\r\n    this.registerForm = this._FormBuilder.group(\r\n      {\r\n        firstName: ['', Validators.required],\r\n        lastName: ['', Validators.required],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        phoneNumber: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(10)]],\r\n        userName: '',\r\n        password: ['', [Validators.required, Validators.minLength(6)]],\r\n        confirmPassword: ['', Validators.required],\r\n        id: 0,\r\n        countryObj: [''],\r\n        countryCode: [''],\r\n      },\r\n      {\r\n        validator: MustMatch('password', 'confirmPassword'),\r\n      }\r\n    )\r\n    if (callback) {\r\n      callback()\r\n    }\r\n  }\r\n  get formControl() { return this.registerForm.controls }\r\n  getMaster = (url, masterCollection) => {\r\n    this._HttpService.httpCall(url, 'GET', null, null).subscribe(res => {\r\n      if (res.responseCode == 200) {\r\n        this[masterCollection] = res.result;\r\n      }\r\n    })\r\n  }\r\n  getCountryList = () => {\r\n    let url = ApiPath.globalCountry;\r\n    this.getMaster(url, 'countryList')\r\n  }\r\n  OnCountrySelect(event) {\r\n    this.registerForm.get('countryCode').setValue(event.value)\r\n  }\r\n  OnCountryDeSelect(event) {\r\n    this.registerForm.get('countryCode').setValue(null)\r\n    this.registerForm.get('countryObj').setValue([])\r\n  }\r\n  handleEyeType = () => {\r\n    this.inputType = this.inputType == 'text' ? 'password' : 'text'\r\n  }\r\n  handleSubmitForm = () => {\r\n    if (this.registerForm.invalid) {\r\n      this.submitted = true;\r\n      return\r\n    } else {\r\n      this.submitted = false;\r\n      let url = ApiPath.register;\r\n      let postObj = {\r\n        ...this.registerForm.value\r\n      };\r\n      let params = {\r\n        auth: false\r\n      }\r\n      this._HttpService.httpCall(url, 'POST', postObj, params).subscribe(res => {\r\n        if (res && res.responseCode == 406) {\r\n          let msgArray = [\r\n            { mgs: res.responseMessege, class: 'confirmMsg' }\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Message')\r\n        } else if (res && res.responseCode == 200) {\r\n          let msgArray = [\r\n            { mgs: res.responseMessege, class: 'confirmMsg' },\r\n            { mgs: 'Please check your registered email id for verify your account after two minutes.', class: 'subMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Success').subscribe(res => {\r\n            this._Router.navigate(['/'])\r\n          })\r\n        } else {\r\n          let msgArray = [\r\n            { mgs: res && res.responseMessege ? res.responseMessege : 'Something went wrong', class: 'confirmMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\r\n        }\r\n      },\r\n        error => {\r\n          let msgArray = [\r\n            { mgs: error['message'] ? error['message'] : 'Server Error', class: 'confirmMsg' },\r\n          ]\r\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\r\n        });\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport * as service from '../../_service';\nimport { MustMatch } from '../../_helpers/_validators/must-match.validator';\nimport { ApiPath } from '../../_helpers/_constants/api'\nimport { Router, ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-setpassword',\n  templateUrl: './setpassword.component.html',\n})\nexport class SetpasswordComponent implements OnInit {\n  registerForm: FormGroup;\n  error = '';\n  submitted: boolean = false;\n\n  constructor(private _FormBuilder: FormBuilder, private _HttpService: service.HttpService,\n    private _SharedService: service.SharedService, private _Router: Router, private _ActivatedRoute: ActivatedRoute) { }\n  ngOnInit() {\n    this.createForm(() => {\n      this._ActivatedRoute.queryParams.subscribe(queryParams => {\n        let paramObj = queryParams;\n        this.formControl.code.setValue(queryParams.code)\n        this.formControl.userId.setValue(queryParams.usr)\n        this.formControl.usr.setValue(queryParams.usr)\n      })\n    })\n  }\n  createForm = (callback: any): void => {\n    this.registerForm = this._FormBuilder.group(\n      {\n        newPassword: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required],\n        code: \"\",\n        userId: \"\",\n        usr: ''\n      },\n      {\n        validator: MustMatch('newPassword', 'confirmPassword'),\n      }\n    )\n    if (callback) {\n      callback()\n    }\n  }\n  get formControl() { return this.registerForm.controls }\n\n\n  handleSubmitForm = () => {\n    if (this.registerForm.invalid) {\n      this.submitted = true;\n      return\n    } else {\n      this.submitted = false;\n      let url = ApiPath.AccountForgotPassword;\n      let postObj = this.registerForm.value;\n      this._HttpService.httpCall(url, 'POST', postObj, null).subscribe(res => {\n        if (res && res.responseCode == 406) {\n          let msgArray = [\n            { mgs: res.responseMessege, class: 'confirmMsg' }\n          ]\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Message')\n        } else if (res && res.responseCode == 200) {\n          let msgArray = [\n            { mgs: res.responseMessege, class: 'confirmMsg' },\n          ]\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Success').subscribe(res => {\n            this._Router.navigate(['/auth/login']);\n          })\n        } else {\n          let msgArray = [\n            { mgs: res && res.responseMessege ? res.responseMessege : 'Something went wrong', class: 'confirmMsg' },\n          ]\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\n        }\n      },\n        error => {\n          let msgArray = [\n            { mgs: error['message'] ? error['message'] : 'Server Error', class: 'confirmMsg' },\n          ]\n          this._SharedService.dialogConfig(msgArray, false, false, false, null, null, false, 'Error')\n        });\n    }\n  }\n}\n\n"],"sourceRoot":""}